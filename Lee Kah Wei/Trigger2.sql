CREATE OR REPLACE TRIGGER TRG_CHECK_TICKET_NUMBER
BEFORE INSERT ON transactionDetails
FOR EACH ROW
DECLARE
	V_SCHEDULEID BUSSCHEDULE.SCHEDULEID%TYPE;
	V_TOTALTICKET NUMBER := 0;
	V_CHILDTICKET NUMBER := 0;
	V_ADULTTICKET NUMBER := 0;
	V_CITIZENTICKET NUMBER := 0;
	V_NUMBEROFTICKETAVAILABLE NUMBER := 0;
	V_TICKET_TO_BE_ADDED_BACK NUMBER := 0;
	V_NEW_NUMBER_OF_TICKET_AVAILABLE BUSSCHEDULE.NOOFTICKETAVAILABLE%TYPE := 0;

	CURSOR TRANSACTION_DETAILS_CURSOR IS
		SELECT childTicketQty, adultTicketQty, citizenTicketQty
		FROM TRANSACTIONDETAILS
		WHERE TRANSACTIONID = :NEW.TRANSACTIONID;

	CURSOR UPDATE_IF_DELETE_CURSOR IS
		SELECT SCHEDULEID, childTicketQty, adultTicketQty, citizenTicketQty
		FROM TRANSACTIONDETAILS
		WHERE TRANSACTIONID = :NEW.TRANSACTIONID;

BEGIN
	V_TOTALTICKET := 0;
	V_CHILDTICKET := 0;
	V_ADULTTICKET := 0;
	V_CITIZENTICKET := 0;
	V_NUMBEROFTICKETAVAILABLE := 0;
	V_TICKET_TO_BE_ADDED_BACK := 0;
	V_NEW_NUMBER_OF_TICKET_AVAILABLE := 0;

	SELECT NOOFTICKETAVAILABLE INTO V_NUMBEROFTICKETAVAILABLE
	FROM BUSSCHEDULE
	WHERE SCHEDULEID = :NEW.SCHEDULEID;

	DBMS_OUTPUT.PUT_LINE('SCHEDULE ID: ' || :NEW.SCHEDULEID);
	DBMS_OUTPUT.PUT_LINE('AVAILABLE TICKET QUANTITY ' || ' IS : '  || V_NUMBEROFTICKETAVAILABLE);
	OPEN TRANSACTION_DETAILS_CURSOR;
	LOOP
	FETCH TRANSACTION_DETAILS_CURSOR INTO
		V_CHILDTICKET,
		V_ADULTTICKET,
		V_CITIZENTICKET;
	EXIT WHEN (TRANSACTION_DETAILS_CURSOR%NOTFOUND);

	V_TOTALTICKET := V_TOTALTICKET + V_CHILDTICKET + V_ADULTTICKET + V_CITIZENTICKET;
	
	END LOOP;

	V_TOTALTICKET := V_TOTALTICKET + :NEW.CHILDTICKETQTY + :NEW.ADULTTICKETQTY + :NEW.CITIZENTICKETQTY;

	IF V_TOTALTICKET > 10 THEN
		OPEN UPDATE_IF_DELETE_CURSOR;
		LOOP
		FETCH UPDATE_IF_DELETE_CURSOR INTO
			V_SCHEDULEID,
			V_CHILDTICKET,
			V_ADULTTICKET,
			V_CITIZENTICKET;
		EXIT WHEN (UPDATE_IF_DELETE_CURSOR%NOTFOUND);
		
		V_TICKET_TO_BE_ADDED_BACK := V_CHILDTICKET + V_ADULTTICKET + V_CITIZENTICKET;

		SELECT NOOFTICKETAVAILABLE INTO V_NEW_NUMBER_OF_TICKET_AVAILABLE
		FROM BUSSCHEDULE
		WHERE SCHEDULEID = V_SCHEDULEID;

		V_NEW_NUMBER_OF_TICKET_AVAILABLE := V_NEW_NUMBER_OF_TICKET_AVAILABLE + V_TICKET_TO_BE_ADDED_BACK;

		UPDATE BUSSCHEDULE
		SET NOOFTICKETAVAILABLE = V_NEW_NUMBER_OF_TICKET_AVAILABLE
		WHERE SCHEDULEID = V_SCHEDULEID;

		END LOOP;
		
		DELETE FROM TRANSACTIONDETAILS WHERE TRANSACTIONID = :NEW.TRANSACTIONID;
		DELETE FROM TRANSACTION WHERE TRANSACTIONID = :NEW.TRANSACTIONID;
		DBMS_OUTPUT.PUT_LINE(chr(10) || SQLERRM);
		RAISE_APPLICATION_ERROR(-20100, 'MAXIMUM TICKET QUANTITY EXCEED.');

	END IF;
	CLOSE TRANSACTION_DETAILS_CURSOR;
END;
/

INSERT INTO TRANSACTIONDETAILS VALUES ('T24658', 'SE3000', 10,2,3);