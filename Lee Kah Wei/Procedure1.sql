DELETE TRANSACTIONDETAILS WHERE TRANSACTIONID = 'T24660';
DELETE TRANSACTION WHERE TRANSACTIONID = 'T24660';
DELETE TRANSACTIONDETAILS WHERE TRANSACTIONID = 'T24659';
DELETE TRANSACTION WHERE TRANSACTIONID = 'T24659';

UPDATE BUSSCHEDULE
SET NOOFTICKETAVAILABLE = 20
WHERE SCHEDULEID = 'SE2998';

UPDATE BUSSCHEDULE
SET NOOFTICKETAVAILABLE = 0
WHERE SCHEDULEID = 'SE2999';

UPDATE BUSSCHEDULE
SET NOOFTICKETAVAILABLE = 20
WHERE SCHEDULEID = 'SE3000';

CREATE OR REPLACE PROCEDURE ADD_NEW_TRANSACTION(p_transID in varchar2, v_paymentType in varchar2, v_memberid in varchar2, v_scheduleID in varchar2, v_childTicketQty in number, v_adultTicketQty in number, v_citizenTicketQty in number) AS
	v_transactionID TRANSACTION.TRANSACTIONID%TYPE;
	V_SCHEDULE_EXIST NUMBER;
	V_TRANSACTION_EXIST NUMBER;
	V_MEMBER_EXIST NUMBER;
	V_SCHEDULE_VALID NUMBER;
	V_TOTAL_TICKET_BUY NUMBER := 0;
	V_NUMBER_OF_TICKET_AVAILABLE NUMBER := 0;
	V_CHECK_SEAT NUMBER;
	
	MAXIMUM_QTY_EXCEED EXCEPTION;
	PRAGMA exception_init(MAXIMUM_QTY_EXCEED, -20100);

	SCHEDULE_NOT_EXIST EXCEPTION;
	PRAGMA exception_init(SCHEDULE_NOT_EXIST, -20101);

	INVALID_PURCHASE_DATE EXCEPTION;
	PRAGMA exception_init(INVALID_PURCHASE_DATE, -20102);

	INVALID_PAYMENT_TYPE EXCEPTION;
	PRAGMA exception_init(INVALID_PAYMENT_TYPE, -20103);

	MEMBER_NOT_EXIST EXCEPTION;
	PRAGMA exception_init(MEMBER_NOT_EXIST, -20104);

	SCHEDULE_INVALID EXCEPTION;
	PRAGMA exception_init(SCHEDULE_INVALID, -20105); 

	NO_OF_SEAT_0 EXCEPTION;
	PRAGMA exception_init(NO_OF_SEAT_0, -20106); 

BEGIN	
	v_transactionID := CONCAT('T', p_transID);
	V_TRANSACTION_EXIST := FINDTRANSACTIONID(V_TRANSACTIONID);
	V_SCHEDULE_EXIST := findScheduleID(v_scheduleID);
	V_MEMBER_EXIST := FINDMEMBERID(V_MEMBERID);
	V_SCHEDULE_VALID := VALIDATESCHEDULE(V_SCHEDULEID, SYSDATE);
	V_CHECK_SEAT := CHECKSEAT0(V_SCHEDULEID);	

	IF V_TRANSACTION_EXIST = 0 AND V_MEMBER_EXIST = 1 AND V_SCHEDULE_VALID = 1 AND V_SCHEDULE_EXIST = 1 AND V_CHECK_SEAT = 0 THEN
		SELECT NOOFTICKETAVAILABLE INTO V_NUMBER_OF_TICKET_AVAILABLE
		FROM BUSSCHEDULE
		WHERE SCHEDULEID = V_SCHEDULEID;

		INSERT INTO transaction (TRANSACTIONID, PURCHASEDATE, PAYMENTTYPE, MEMBERID) VALUES (V_TRANSACTIONID, SYSDATE, V_PAYMENTTYPE, V_MEMBERID);
		DBMS_OUTPUT.PUT_LINE('NEW TRANSACTION ID: ' || V_TRANSACTIONID || ' FOR MEMBER ' || V_MEMBERID ||' IS INSERTED SUCCESSFULLY');

	ELSIF V_MEMBER_EXIST = 0 THEN
		RAISE_APPLICATION_ERROR(-20104, 'INVALID MEMBER ID!');

	ELSIF V_SCHEDULE_EXIST = 0 THEN
		RAISE_APPLICATION_ERROR(-20101, 'INVALID SCHEDULE ID!');

	ELSIF V_SCHEDULE_VALID = 0 THEN
		RAISE_APPLICATION_ERROR(-20105, 'INVALID SCHEDULE ID!');

	ELSIF V_CHECK_SEAT = 1 THEN
		RAISE_APPLICATION_ERROR(-20106, 'AVAILABLE SEAT IS ZERO!');

	END IF;

	IF V_SCHEDULE_VALID = 1 AND V_SCHEDULE_EXIST = 1 THEN
		-- INSERT INTO TRANSACTIONDETAILS VALUES (V_TRANSactionID, V_SCHEDULEID, v_childTicketQty, V_ADULTTICKETQTY, V_CITIZENTICKETQTY);
		insert into transactionDetails values (v_transACTIONID, V_scheduleID, V_childTicketQty, V_adultTicketQty, V_citizenTicketQty);

		V_TOTAL_TICKET_BUY := V_childTicketQty + V_adultTicketQty + V_citizenTicketQty;
		V_NUMBER_OF_TICKET_AVAILABLE := V_NUMBER_OF_TICKET_AVAILABLE - V_TOTAL_TICKET_BUY;

		UPDATE BUSSCHEDULE
		SET NOOFTICKETAVAILABLE = V_NUMBER_OF_TICKET_AVAILABLE
		WHERE SCHEDULEID = V_SCHEDULEID;
		
		DBMS_OUTPUT.put_line(chr(10));
		DBMS_OUTPUT.PUT_LINE('PURCHASE DETAILS');
		DBMS_OUTPUT.PUT_LINE('------------------------------------------');
		DBMS_OUTPUT.PUT_LINE('PAYMENT TYPE: ' || V_PAYMENTTYPE);
		DBMS_OUTPUT.PUT_LINE('SCHEDULE ID: ' || V_SCHEDULEID);
		IF V_CHILDTICKETQTY > 0 THEN
			DBMS_OUTPUT.PUT_LINE('CHILD TICKET QUANTITY: ' || V_CHILDTICKETQTY);
		END IF;
		IF V_ADULTTICKETQTY > 0 THEN
			DBMS_OUTPUT.PUT_LINE('ADULT TICKET QUANTITY: ' || V_ADULTTICKETQTY);
		END IF;
		IF V_CITIZENTICKETQTY > 0 THEN
			DBMS_OUTPUT.PUT_LINE('CITIZEN TICKET QUANTITY: ' || V_CITIZENTICKETQTY);
		END IF;
		DBMS_OUTPUT.PUT_LINE('------------------------------------------');
		DBMS_OUTPUT.put_line(chr(10));
		DBMS_OUTPUT.PUT_LINE('NEW TRANSACTION ID: ' || V_TRANSACTIONID || ' FOR MEMBER ' || V_MEMBERID || ' DETAILS INSERTED SUCCESSFULLY');


	ELSIF V_SCHEDULE_VALID = 0 THEN
		RAISE_APPLICATION_ERROR(-20105, 'INVALID SCHEDULE ID!');

	ELSIF V_SCHEDULE_EXIST = 0 THEN
		RAISE_APPLICATION_ERROR(-20101, 'INVALID SCHEDULE ID!');

	END IF;

	EXCEPTION
		WHEN SCHEDULE_NOT_EXIST THEN
			DBMS_OUTPUT.PUT_LINE(chr(10) || SQLERRM);
			DBMS_OUTPUT.PUT_LINE('SCHEDULE DOES NOT EXIST IN THE DATABASE.');
		WHEN MAXIMUM_QTY_EXCEED THEN
			DELETE FROM TRANSACTIONDETAILS WHERE TRANSACTIONID = V_TRANSACTIONID;
			DELETE FROM TRANSACTION WHERE TRANSACTIONID = V_TRANSACTIONID;
			DBMS_OUTPUT.PUT_LINE(chr(10) || SQLERRM);
			DBMS_OUTPUT.PUT_LINE('TRANSACTION WILL BE DELETED!');
		WHEN INVALID_PURCHASE_DATE THEN
			DBMS_OUTPUT.PUT_LINE('PURCHASE DATE BIGGER THAN CURRENT DATE.');
		WHEN INVALID_PAYMENT_TYPE THEN
			DBMS_OUTPUT.PUT_LINE('PAYMENT TYPE MUST BE IN E-WALLET, DEBIT CARD/CREDIT CARD OR ONLINE BANKING.');
		WHEN MEMBER_NOT_EXIST THEN
			DBMS_OUTPUT.PUT_LINE(chr(10) || SQLERRM);
			DBMS_OUTPUT.PUT_LINE('MEMBER DOES NOT EXIST IN THE DATABASE.');
		WHEN SCHEDULE_INVALID THEN
			DBMS_OUTPUT.PUT_LINE(chr(10) || SQLERRM);
			DBMS_OUTPUT.PUT_LINE('SCHEDULE DATE LESSER THAN CURRENT DATE');
		WHEN NO_OF_SEAT_0 THEN
			DBMS_OUTPUT.PUT_LINE(chr(10) || SQLERRM);
			DBMS_OUTPUT.PUT_LINE('CANNOT PURCHASE!!');

END;
/
EXEC ADD_NEW_TRANSACTION('24659', 'Online Banking', 'M1060', 'SE2998', 1, 3, 0);
EXEC ADD_NEW_TRANSACTION('24660', 'E-Wallet', 'M1050', 'SE3000', 10, 3, 0);
EXEC ADD_NEW_TRANSACTION('24660', 'E-Wallet', 'M1050', 'SE2910', 5, 3, 0);
EXEC ADD_NEW_TRANSACTION('24660', 'Online Banking', 'M1045', 'SE3001', 1, 0, 0);
EXEC ADD_NEW_TRANSACTION('24660', 'Online Banking', 'M1501', 'SE3000', 1, 0, 0);
EXEC ADD_NEW_TRANSACTION('24660', 'Online Banking', 'M1400', 'SE2999', 1, 0, 0);
EXEC ADD_NEW_TRANSACTION('24660', 'Cash', 'M1400', 'SE2998', 1, 0, 0);